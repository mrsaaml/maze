private boolean solve(int row, int col) {
        // Base cases
        if (row < 0 || row >= rows || col < 0 || col >= cols) return false; // Out of bounds
        if (grid[row][col] == 1) return false; // Wall
        if (visited[row][col]) return false; // Already visited
        if (row == exit.row && col == exit.col) { // Found exit
            path.add(new Cell(row, col));
            return true;
        }

        // Mark as visited
        visited[row][col] = true;
        path.add(new Cell(row, col));

        // Try all directions & recursively solve from the new cell.
        for (int[] dir : directions) {
            if (solve(row + dir[0], col + dir[1])) {
                return true;
            }
        }

        // Backtrack
        path.remove(path.size() - 1);
        return false;
    }
