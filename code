import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import java.util.Stack;

public class Maze {
    private final int rows;
    private final int cols;
    private int[][] grid;
    private Cell start;
    private Cell exit;
    private List<Cell> path;
    private boolean[][] visited;
    private Random random = new Random();

    // Directions: up, right, down, left
    private final int[][] directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

    public Maze(int rows, int cols) {//Constructor
        if (rows < 10 || cols < 10) {
            throw new IllegalArgumentException("Maze dimensions must be at least 10x10");
        }
        this.rows = rows;
        this.cols = cols;
        this.grid = new int[rows][cols];
        this.start = new Cell(0, 1);
        this.exit = new Cell(rows - 1, cols - 2);
        this.path = new ArrayList<>();
        this.visited = new boolean[rows][cols];
    }

    public void generateMaze() {
        // Initialize grid with walls (1 = wall, 0 = path)
        for (int[] row : grid) {
            Arrays.fill(row, 1);
        }

        // Start carving from the starting position
        carvePath(start.row, start.col);

        // Ensure start and exit are open
        grid[start.row][start.col] = 0;
        grid[exit.row][exit.col] = 0;

        // Ensure there's a path to exit
        connectToExit();
    }

    private void carvePath(int row, int col) {
        grid[row][col] = 0; // Mark current cell as path

        // Create shuffled list of directions
        List<Integer> dirs = Arrays.asList(0, 1, 2, 3);
        Collections.shuffle(dirs);

        for (int dir : dirs) {
            int newRow = row + directions[dir][0] * 2;
            int newCol = col + directions[dir][1] * 2;

            // Check if next cell is within bounds and still a wall
            if (newRow > 0 && newRow < rows - 1 && newCol > 0 && newCol < cols - 1 && grid[newRow][newCol] == 1) {
                // Carve through the wall between current and next cell
                grid[row + directions[dir][0]][col + directions[dir][1]] = 0;
                carvePath(newRow, newCol);
            }
        }
    }

    private void connectToExit() {
        // Simple DFS to ensure exit is reachable
        boolean[][] visited = new boolean[rows][cols];
        Stack<Cell> stack = new Stack<>();
        stack.push(start);
        visited[start.row][start.col] = true;

        while (!stack.isEmpty()) {
            Cell current = stack.pop();

            if (current.equals(exit)) {
                return; // Exit is reachable
            }

            for (int[] dir : directions) {
                int newRow = current.row + dir[0];
                int newCol = current.col + dir[1];

                // Check if the next cell is valid, unvisited, and a path
                if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols
                        && grid[newRow][newCol] == 0 && !visited[newRow][newCol]) {
                    visited[newRow][newCol] = true;
                    stack.push(new Cell(newRow, newCol));
                }
            }
        }

        // If we get here, exit wasn't reachable, so connect it
        grid[exit.row][exit.col] = 0;
        grid[exit.row - 1][exit.col] = 0;
    }

    public boolean solveMaze() {
        // Reset visited and path
        for (boolean[] row : visited) {
            Arrays.fill(row, false);
        }
        path.clear();

        return solve(start.row, start.col);
    }

    private boolean solve(int row, int col) {
        // Base cases
        if (row < 0 || row >= rows || col < 0 || col >= cols) return false; // Out of bounds
        if (grid[row][col] == 1) return false; // Wall
        if (visited[row][col]) return false; // Already visited
        if (row == exit.row && col == exit.col) { // Found exit
            path.add(new Cell(row, col));
            return true;
        }

        // Mark as visited
        visited[row][col] = true;
        path.add(new Cell(row, col));

        // Try all directions & recursively solve from the new cell.
        for (int[] dir : directions) {
            if (solve(row + dir[0], col + dir[1])) {
                return true;
            }
        }

        // Backtrack
        path.remove(path.size() - 1);
        return false;
    }

    public void printMaze() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (i == start.row && j == start.col) {
                    System.out.print("S ");
                } else if (i == exit.row && j == exit.col) {
                    System.out.print("E ");
                } else if (path.contains(new Cell(i, j))) {
                    System.out.print(". ");
                } else {
                    System.out.print(grid[i][j] == 1 ? "# " : "  ");
                }
            }
            System.out.println();
        }
    }

    private static class Cell {
        int row;
        int col;

        public Cell(int row, int col) {//Constructor
            this.row = row;
            this.col = col;
        }

        // Overridden equals method to compare two cells.
        // Two cells are considered equal if they have the same row and column.
        @Override
        public boolean equals(Object obj) {
            // Check if the current object is the same as the passed object.
            if (this == obj) return true;
            // Check if the passed object is null or is not of the same class.
            if (obj == null || getClass() != obj.getClass()) return false;
            // Cast the object to a Cell type and compare the row and column values.
            Cell cell = (Cell) obj;
            return row == cell.row && col == cell.col;
        }

        // Overridden hashCode method to return a unique hash code based on the cell's row and column.
        @Override
        public int hashCode() {
            return 31 * row + col;
        }
    }

    public static void main(String[] args) {
        Maze maze = new Maze(15, 15);
        maze.generateMaze();
        System.out.println("Generated Maze:");
        maze.printMaze();

        if (maze.solveMaze()) {
            System.out.println("\nSolved Maze:");
            maze.printMaze();
        } else {
            System.out.println("No solution found!");
        }
    }
}
